using System;
using System.Data;
using System.Windows.Forms;
using Npgsql;

namespace WindowsFormsApp1
{
    public partial class ChatForm : Form
    {
        private string currentUserId; // 로그인한 사용자 ID
        private string chatWithUserId; // 채팅 상대 사용자 ID
        private NpgsqlConnection nConnect; // 데이터베이스 연결 객체
        private Timer updateTimer; // 타이머 객체

        // 폼 생성자
        public ChatForm(string currentUserId, string chatWithUserId)
        {
            InitializeComponent();
            this.currentUserId = currentUserId;
            this.chatWithUserId = chatWithUserId;

            InitializeConnection();
            DisplayChatWithUser(); // 상대방 ID를 표시하는 메서드 호출

            // 타이머 설정
            updateTimer = new Timer();
            updateTimer.Interval = 1000; // 1초마다 메시지 확인
            updateTimer.Tick += UpdateTimer_Tick;
            updateTimer.Start();
        }

        private void InitializeConnection()
        {
            try
            {
                string connectionString = "Server=localhost;Port=5432;User Id=postgres;Password=5130;Database=NeighborChat;";
                nConnect = new NpgsqlConnection(connectionString);
                nConnect.Open(); // 데이터베이스 연결 열기
            }
            catch (Exception ex)
            {
                MessageBox.Show($"데이터베이스 연결 오류: {ex.Message}", "오류", MessageBoxButtons.OK, MessageBoxIcon.Error);
                this.Close(); // 오류 발생 시 폼 닫기
            }
        }

        private void LoadChatHistory()
        {
            try
            {
                string query = "SELECT sender_id, message_text, timestamp FROM chat_messages " +
                               "WHERE (sender_id = @currentUserId AND receiver_id = @chatWithUserId) " +
                               "OR (sender_id = @chatWithUserId AND receiver_id = @currentUserId) " +
                               "ORDER BY timestamp";

                using (var command = new NpgsqlCommand(query, nConnect))
                {
                    command.Parameters.AddWithValue("@currentUserId", currentUserId);
                    command.Parameters.AddWithValue("@chatWithUserId", chatWithUserId);

                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            string senderId = reader.GetString(0);
                            string messageText = reader.GetString(1);
                            DateTime timestamp = reader.GetDateTime(2);

                            // 메시지와 타임스탬프를 함께 표시
                            string displaySenderId = senderId == currentUserId ? "나" : senderId;
                            tbChat.AppendText($"{displaySenderId} ({timestamp:HH:mm:ss}): {messageText}{Environment.NewLine}");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"채팅 기록 로드 오류: {ex.Message}", "오류", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void DisplayChatWithUser()
        {
            lblChatWith.Text = $"Chatting with: {chatWithUserId}"; // 상대방 ID를 라벨에 표시
        }

        private void btnSend_Click(object sender, EventArgs e)
        {
            string message = tbInput.Text.Trim();

            if (!string.IsNullOrEmpty(message))
            {
                // 메시지를 데이터베이스에 저장
                SaveMessageToDatabase(currentUserId, chatWithUserId, message);

                // 채팅 박스에 메시지 추가 (자신의 메시지에는 "나" 표시)
                tbChat.AppendText($"나 ({DateTime.Now:HH:mm:ss}): {message}{Environment.NewLine}");
                tbInput.Clear(); // 입력 필드 비우기
            }
            else
            {
                MessageBox.Show("메시지를 입력해 주세요.", "입력 오류", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private void SaveMessageToDatabase(string senderId, string receiverId, string messageText)
        {
            const string query = "INSERT INTO chat_messages (sender_id, receiver_id, message_text, timestamp) VALUES (@senderId, @receiverId, @messageText, CURRENT_TIMESTAMP)";

            try
            {
                using (var command = new NpgsqlCommand(query, nConnect))
                {
                    command.Parameters.AddWithValue("@senderId", senderId);
                    command.Parameters.AddWithValue("@receiverId", receiverId);
                    command.Parameters.AddWithValue("@messageText", messageText);

                    command.ExecuteNonQuery(); // 메시지를 데이터베이스에 삽입
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"메시지 저장 오류: {ex.Message}", "오류", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void UpdateTimer_Tick(object sender, EventArgs e)
        {
            // 타이머가 Tick 될 때마다 채팅 기록을 다시 로드하여 업데이트
            tbChat.Clear();
            LoadChatHistory();
        }

        // 폼이 닫힐 때 데이터베이스 연결 닫기
        protected override void OnFormClosed(FormClosedEventArgs e)
        {
            base.OnFormClosed(e);
            if (nConnect != null && nConnect.State == ConnectionState.Open)
            {
                nConnect.Close();
            }

            // 타이머 중지 및 해제
            if (updateTimer != null)
            {
                updateTimer.Stop();
                updateTimer.Dispose();
            }
        }
    }
}
