using Npgsql;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Security.Cryptography;

namespace ChattingProgram
{
    public partial class Sign_Up : Form
    {
        private NpgsqlConnection nConnect;
        StringBuilder StrConnection = new StringBuilder("Server=localhost;Port=5432;User Id=postgres;Password=5130;Database=Chatting");
        

        public Sign_Up()
        {
            InitializeComponent();
            ConnectToDatabase();
        }
        private void ConnectToDatabase()
        {
            nConnect = new NpgsqlConnection(StrConnection.ToString());

            try
            {
                if (nConnect.State == ConnectionState.Closed)
                {
                    nConnect.Open();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"데이터베이스 연결 오류: {ex.Message}");
            } 
        }

        private void btn_Done_Click(object sender, EventArgs e)
        {
            StringBuilder id = new StringBuilder(tb_id.Text);
            StringBuilder pw = new StringBuilder(tb_pw.Text);
            StringBuilder pw_check = new StringBuilder(tb_pw_check.Text);
            StringBuilder name = new StringBuilder(tb_name.Text);
            StringBuilder nick_name = new StringBuilder(tb_nick_name.Text);

            SHA256Managed sha256Managed = new SHA256Managed();
            byte[] encryptBytes = sha256Managed.ComputeHash(Encoding.UTF8.GetBytes(pw.ToString()));

            if (string.IsNullOrWhiteSpace(id.ToString()))
            {
                MessageBox.Show("아이디를 입력해주세요.");
                return;
            }
            else if ((Authentication(id.ToString()) || btn_dupl.Enabled == true) != true)
            {
                MessageBox.Show("아이디 중복확인을 완료해주세요.");
                return;
            }
            else if (string.IsNullOrWhiteSpace(pw.ToString()))
            {
                MessageBox.Show("비밀번호를 입력해주세요.");
                return;
            }
            else if (string.IsNullOrWhiteSpace(tb_pw_check.Text))
            {
                MessageBox.Show("비밀번호 확인을 해주세요.");
                return;
            }
            else if (tb_pw.Text != tb_pw_check.Text)
            {
                MessageBox.Show("비밀번호가 서로 같지 않습니다.");
                return;
            }
            else if (string.IsNullOrWhiteSpace(name.ToString()))
            {
                MessageBox.Show("이름을 입력해주세요.");
                return;
            }
            else if (string.IsNullOrWhiteSpace(nick_name.ToString()))
            {
                MessageBox.Show("닉네임을 입력해주세요.");
                return;
            }
            else
            {
                try
                {
                    StringBuilder signup_query = new StringBuilder("UPDATE signup SET pw = @pw, name = @name, nickname = @nickname, temporary_number = 1) WHERE id = @id;");
                    using (var nCom = new NpgsqlCommand(signup_query.ToString(), nConnect))
                    {
                        nCom.Parameters.AddWithValue("@id", id.ToString());
                        nCom.Parameters.AddWithValue("@pw", encryptBytes);
                        nCom.Parameters.AddWithValue("@name", name.ToString());
                        nCom.Parameters.AddWithValue("@nickname", nick_name.ToString());
                        nCom.ExecuteNonQuery();

                        MessageBox.Show("회원가입이 정상적으로 완료되었습니다.");
                        this.Close();
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"회원가입 오류: {ex.Message}");
                }
            }

        }

        private void btn_dupl_Click(object sender, EventArgs e)
        {
            StringBuilder id = new StringBuilder(tb_id.Text);
            StringBuilder pw = new StringBuilder(tb_pw.Text);
            StringBuilder name = new StringBuilder(tb_name.Text);
            StringBuilder nick_name = new StringBuilder(tb_nick_name.Text);
            StringBuilder temp_id = new StringBuilder("INSERT INTO signup (id, temporary_number) VALUES (@id, 0);");
            StringBuilder Del_temp_id = new StringBuilder("DELETE FROM signup WHERE id = @id;");

            try
            {
                if (Authentication(id.ToString()))
                {
                    MessageBox.Show("중복된 아이디입니다.");
                    return;
                }
                else if (tb_id.Text.Length < 6)
                {
                    MessageBox.Show("6자리 이상 입력해야 합니다.");
                }
                else
                {
                    DialogResult result = MessageBox.Show("사용 가능한 아이디입니다. 사용하시겠습니까?", "아이디 중복확인",MessageBoxButtons.OKCancel);
                    if (result == DialogResult.OK)
                    {
                        lbl_dupl.Text = "중복확인 완료";
                        tb_id.Enabled = false;
                        btn_dupl.Enabled = false;
                        using (var nCom = new NpgsqlCommand(temp_id.ToString(), nConnect))
                        {
                            nCom.Parameters.AddWithValue("@id", id.ToString());
                            nCom.ExecuteNonQuery();
                        }

                    }
                    else if (result == DialogResult.Cancel)
                    {
                        using(var nCom = new NpgsqlCommand(Del_temp_id.ToString(), nConnect))
                        {
                            nCom.Parameters.AddWithValue("@id", id.ToString());
                            return;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"아이디 중복확인 오류: {ex.Message}");
            }
        }
        private bool Authentication(string id)
        {
            StringBuilder query = new StringBuilder("SELECT COUNT(*) FROM signup WHERE id = @id");
            try
            {
                using (var nCom = new NpgsqlCommand(query.ToString(), nConnect))
                {
                    
                    nCom.Parameters.AddWithValue("@id", id);

                    long count = (long)nCom.ExecuteScalar();
                    return count > 0;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"아이디 중복확인 오류: {ex.Message}");
                return false;
            }
        }

        ToolTip toolTip = new ToolTip();
        private void Leave_pwcheck(object sender, EventArgs e)
        {
            if(tb_pw.Text != tb_pw_check.Text)
            {
                toolTip.Show("비밀번호가 일치하는지 확인해주세요.", tb_pw_check, 0, tb_pw_check.Height, 5000);
            }
            else
            {
                toolTip.Hide(tb_pw_check);
            }
        }
        private void Form_Closed(object sender, FormClosedEventArgs e)
        {
            StringBuilder id = new StringBuilder(tb_id.Text);
            StringBuilder temp_select = new StringBuilder("SELECT temporary_number FROM signup WHERE id = @id AND temporary_number = 0;");
            StringBuilder temp_del = new StringBuilder("DELTE FROM signup WHERE id = @id AND temporary_number = 0;");
            var sCom = new NpgsqlCommand(temp_select.ToString(), nConnect);
            var dCom = new NpgsqlCommand(temp_del.ToString(), nConnect);
            sCom.Parameters.AddWithValue("@id", id);

            NpgsqlDataReader temp_result = sCom.ExecuteReader();

            
            Log_In login = new Log_In();
            login.Show();
        }
    }
}
