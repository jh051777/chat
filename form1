using System;
using System.Data;
using System.Windows.Forms;
using Npgsql;

namespace WinForm_Test
{
    public partial class Form1 : Form
    {
        // 데이터베이스 연결 문자열
        private const string DefaultConnectionString = "Server={0};Port={1};User Id=postgres;Password=5130;Database=NeighborChat;";
        // NpgsqlConnection 객체
        private NpgsqlConnection nConnect;
        // 로그인 한 ID
        private string LoggedInUser;
        public Form1()
        {
            InitializeComponent();
        }

        //tbIP와 tbPort에 입력한 값을 이용하여 데이터베이스 연결 메서드
        private void ConnectionInDatabase(string svIp, string svPort)
        {
            var ConnectionString = string.Format(DefaultConnectionString, svIp, svPort);
            nConnect = new NpgsqlConnection(ConnectionString);

            try
            {
                // 연결 상태가 닫힌 상태일 때 연결
                if (nConnect.State == ConnectionState.Closed)
                {
                    nConnect.Open();
                }
            }
            // 예외처리
            catch (Exception ex)
            {
                MessageBox.Show($"데이터베이스 연결 오류: {ex.Message}");
            }
        }

        // btnLogin : 로그인 버튼 이름
        private void btnLogin_Click(object sender, EventArgs e)
        {
            string svIP = tbIP.Text;        // tbIP :     Server IP TextBox 이름
            string svPort = tbPort.Text;    // tbPort :   Server Port TextBox 이름
            string id = tbID.Text;          // tbID :     ID TextBox 이름
            string pw = tbPW.Text;          // tbPW :     PW TextBox 이름

            // 입력한 주소로 데이터베이스 연결 메서드 호출
            ConnectionInDatabase(svIP, svPort);

            try
            {
                // 입력한 id와 pw로 사용자 인증 메서드 호출
                if (AuthenticateUser(id, pw))
                {
                    // 입력한 id 정보
                    LoggedInUser = id;
                    // Chat 폼 화면에 생성
                    var chat = new Chat(LoggedInUser);
                    chat.Show();
                }
                else
                {
                    MessageBox.Show("아이디 또는 비밀번호가 잘못되었습니다.");
                }
            }
            finally //무조건 실행되는 부분
            {
                // 데이터베이스에 연결 상태가 null이 아니거나 연결 되어있다면 닫기
                if (nConnect != null && nConnect.State == ConnectionState.Open)
                {
                    nConnect.Close();
                }
            }
        }

        // 회원가입 버튼 이름 : btnSignup
        private Signup signup;
        private void btnSignup_Click(object sender, EventArgs e)
        {
            // signup폼이 null이거나 활성화 상태가 아니면 활성화
            if (signup == null || signup.IsDisposed)
            {
                signup = new Signup();
                signup.Show();
            }
            else
            {
                // signup 폼을 화면 맨 앞으로 가져옴
                signup.Activate();
            }
        }


        // 입력한 id와 pw로 사용자 인증을 하는 메서드(데이터베이스에 id와 pw를 select한 수가 1개 이상일 경우 인증 성공)
        private bool AuthenticateUser(string id, string pw)
        {
            // 데이터베이스에 실행할 쿼리 정의
            const string query = "SELECT COUNT (*) FROM signup WHERE id = @id AND pw = @pw;";
            try
            {
                // 데이터베이스에 연결
                using (var nCommand = new NpgsqlCommand(query, nConnect))
                {
                    // 쿼리에서 @id 파라미터에 id값 설정
                    nCommand.Parameters.AddWithValue("@id", id);
                    // 쿼리에서 @pw 파라미터에 pw값 설정
                    nCommand.Parameters.AddWithValue("@pw", pw);

                    // 쿼리 실행 후 결과 반환(ExecuteScalar는 쿼리에서 반환한 결과 집합에서 첫 번째 행의 첫 번째 열을 반환)
                    long count = (long)nCommand.ExecuteScalar();
                    return count > 0;
                }
            }
            catch (Exception ex)
            {
                // 예외처리
                MessageBox.Show($"인증오류: {ex.Message}");
                return false;
            }
        }
    }
}
