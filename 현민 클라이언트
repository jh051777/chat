using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Newtonsoft.Json.Linq;
using System.Net;

namespace WindowsFormsApp1
{
    public partial class Form1 : Form
    {
        private Socket clientSocket;
        private string serverIP;
        private int port;

        public Form1()
        {
            InitializeComponent();
            LoadConfig(); // 폼 초기화 시 config.json 파일을 로드합니다.
            ConnectToServer(serverIP, port); // 프로그램 시작 시 자동으로 서버에 연결합니다.
        }

        private void LoadConfig()
        {
            try
            {
                // config.json 파일 읽기
                string configText = File.ReadAllText("config.json");

                // JSON 파싱
                JObject config = JObject.Parse(configText);
                serverIP = config["server_ip"].ToString();
                port = (int)config["port"];

            }
            catch (Exception ex)  
            {
                MessageBox.Show("Failed to load config: " + ex.Message);
            }
        }

        private void ConnectToServer(string ipAddress, int port)
        {
            try
            {
                clientSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                IPAddress serverIP = IPAddress.Parse(ipAddress);
                IPEndPoint serverEndPoint = new IPEndPoint(serverIP, port);

                clientSocket.Connect(serverEndPoint);
                lstMessages.Items.Add("Connected to server!");
            }
            catch (SocketException ex)
            {
                lstMessages.Items.Add("Connection error: " + ex.Message);
            }
        }

        private void btnSend_Click(object sender, EventArgs e)
        {
            string message = txtMessage.Text;
            SendMessageToServer(message);
        }

        private void SendMessageToServer(string message)
        {
            try
            {
                byte[] data = Encoding.UTF8.GetBytes(message);
                clientSocket.Send(data);

                byte[] buffer = new byte[1024];
                int received = clientSocket.Receive(buffer);
                string response = Encoding.UTF8.GetString(buffer, 0, received);

                lstMessages.Items.Add("Server: " + response);
            }
            catch (SocketException ex)
            {
                lstMessages.Items.Add("Send error: " + ex.Message);
            }
        }

        // 클라이언트가 종료될 때 소켓을 닫는 매서드
        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (clientSocket != null && clientSocket.Connected)
            {
                clientSocket.Shutdown(SocketShutdown.Both);
                clientSocket.Close();
            }

        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }
    }
}
